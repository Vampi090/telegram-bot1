from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, CallbackQueryHandler, CommandHandler, filters, MessageHandler, \
    ConversationHandler
from keyboards.budget_menu import budget_menu_keyboard
from services.logging_service import log_command_usage
from services.database_service import (
    add_goal, get_goals, set_budget, get_budgets,
    add_piggy_bank_goal, get_piggy_bank_goals, add_funds_to_goal,
    delete_piggy_bank_goal, get_piggy_bank_goal
)
from utils.menu_utils import send_or_edit_menu


async def handle_budgeting_callback(update: Update, context: CallbackContext):
    await log_command_usage(update, context)
    user = update.effective_user

    reply_markup = budget_menu_keyboard()

    await send_or_edit_menu(update, context, "üì• –ú–µ–Ω—é –±—é–¥–∂–µ—Ç—É", reply_markup)


async def handle_goal_callback(update: Update, context: CallbackContext):
    await log_command_usage(update, context)

    user_id = None
    if update.message:
        user_id = update.message.from_user.id
    elif update.callback_query:
        user_id = update.callback_query.from_user.id
        await update.callback_query.answer()

    if not user_id:
        return

    if context.args and len(context.args) >= 2:
        try:
            amount = float(context.args[0])
            description = " ".join(context.args[1:])

            success = add_goal(user_id, amount, description)

            if success:
                text = f"üéØ –¶—ñ–ª—å '{description}' –Ω–∞ —Å—É–º—É {amount} –≥—Ä–Ω –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!"
            else:
                text = "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ü—ñ–ª—ñ."
        except ValueError:
            text = "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /goal [—Å—É–º–∞] [–æ–ø–∏—Å]"

        back_button = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="budgeting")]
        ])

        await send_or_edit_menu(update, context, text, back_button)
        return

    goals = get_goals(user_id)

    if not goals:
        text = "üéØ –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏—Ö —Ü—ñ–ª–µ–π."
    else:
        text = "üéØ *–í–∞—à—ñ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ —Ü—ñ–ª—ñ:*\n"
        for amount, description, date in goals:
            text += f"üîπ {description}: {amount} –≥—Ä–Ω (–¥–∞—Ç–∞: {date})\n"

    back_button = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="budgeting")]
    ])

    await send_or_edit_menu(update, context, text, back_button, parse_mode="Markdown")


async def handle_budget_callback(update: Update, context: CallbackContext):
    await log_command_usage(update, context)

    user_id = update.message.from_user.id if update.message else update.callback_query.from_user.id

    if update.callback_query:
        await update.callback_query.answer()

    if context.user_data.get('budget_message_id'):
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id,
                                             message_id=context.user_data['budget_message_id'])
        except Exception:
            pass

    args = context.args if update.message else []

    back_button_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="budgeting")]
    ])

    if len(args) == 2:
        category = " ".join(args[:-1])
        try:
            amount = float(args[-1])
        except ValueError:
            msg = await context.bot.send_message(
                chat_id=user_id,
                text="‚ùå –ü–æ–º–∏–ª–∫–∞! –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –¥–ª—è —Å—É–º–∏ –±—é–¥–∂–µ—Ç—É.",
                reply_markup=back_button_markup
            )
            context.user_data['budget_message_id'] = msg.message_id
            return

        success = set_budget(user_id, category, amount)

        if success:
            msg = await context.bot.send_message(
                chat_id=user_id,
                text=f"‚úÖ –ë—é–¥–∂–µ—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '*{category}*' –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: *{amount} –≥—Ä–Ω*",
                parse_mode="Markdown",
                reply_markup=back_button_markup
            )
        else:
            msg = await context.bot.send_message(
                chat_id=user_id,
                text="‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ –±—é–¥–∂–µ—Ç—É.",
                reply_markup=back_button_markup
            )
        context.user_data['budget_message_id'] = msg.message_id

    else:
        budgets = get_budgets(user_id)

        if not budgets:
            msg = await context.bot.send_message(
                chat_id=user_id,
                text="üí° –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É.",
                reply_markup=back_button_markup
            )
            context.user_data['budget_message_id'] = msg.message_id
            return

        total_budget = sum(amount for _, amount in budgets)

        message_lines = ["üìä *–í–∞—à—ñ –±—é–¥–∂–µ—Ç–∏:*"]
        message_lines.append("\nüíº *–ó–∞–≥–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç:*")
        message_lines.append(f"üí∞ `{total_budget} –≥—Ä–Ω`")
        message_lines.append("\nüìã *–ë—é–¥–∂–µ—Ç –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏:*")
        for category, amount in budgets:
            message_lines.append(f"üí∞ *{category}*: `{amount} –≥—Ä–Ω`")

        msg = await context.bot.send_message(
            chat_id=user_id,
            text="\n".join(message_lines),
            parse_mode="Markdown",
            reply_markup=back_button_markup
        )
        context.user_data['budget_message_id'] = msg.message_id


async def close_budget_if_active(update: Update, context: CallbackContext):
    if context.user_data.get('budget_message_id'):
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id,
                                             message_id=context.user_data['budget_message_id'])
        except Exception:
            pass

        context.user_data['budget_message_id'] = None


async def track_goals(update: Update, context: CallbackContext):
    await log_command_usage(update, context)

    user_id = None
    if update.message:
        user_id = update.message.from_user.id
    elif update.callback_query:
        user_id = update.callback_query.from_user.id
        await update.callback_query.answer()

    if not user_id:
        return

    goals = get_goals(user_id)

    if not goals:
        await context.bot.send_message(chat_id=user_id, text="üéØ –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—Ö —Ü—ñ–ª–µ–π.")
        return

    message_lines = ["üìå *–í–∞—à—ñ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ —Ü—ñ–ª—ñ:*"]
    for amount, description, date in goals:
        message_lines.append(f"üí∞ {description}: {amount} –≥—Ä–Ω (–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {date})")

    back_button = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="budgeting")]
    ])

    message = "\n".join(message_lines)
    await context.bot.send_message(
        chat_id=user_id,
        text=message,
        parse_mode="Markdown",
        reply_markup=back_button
    )


async def handle_piggy_bank_callback(update: Update, context: CallbackContext):
    await log_command_usage(update, context)

    context.user_data.pop('piggy_bank_name', None)
    context.user_data.pop('piggy_bank_amount', None)
    context.user_data.pop('piggy_bank_state', None)

    user_id = None
    if update.message:
        user_id = update.message.from_user.id
    elif update.callback_query:
        user_id = update.callback_query.from_user.id
        await update.callback_query.answer()

    if not user_id:
        return

    goals = get_piggy_bank_goals(user_id)

    keyboard = []

    keyboard.append([InlineKeyboardButton("‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É —Ü—ñ–ª—å", callback_data='piggy_bank_create')])

    if goals:
        for goal_id, name, target_amount, current_amount, _, _, completed in goals:
            progress = int((current_amount / target_amount) * 100) if target_amount > 0 else 0
            status = "‚úÖ" if completed else f"{progress}%"

            button_text = f"{name} - {status}"

            keyboard.append([InlineKeyboardButton(button_text, callback_data=f'piggy_bank_view_{goal_id}')])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='budgeting')])

    reply_markup = InlineKeyboardMarkup(keyboard)

    if goals:
        text = "üê∑ *–í–∞—à–∞ —Å–∫–∞—Ä–±–Ω–∏—á–∫–∞*\n\n–û–±–µ—Ä—ñ—Ç—å —Ü—ñ–ª—å –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–µ—Ç–∞–ª–µ–π –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤—É:"
    else:
        text = "üê∑ *–í–∞—à–∞ —Å–∫–∞—Ä–±–Ω–∏—á–∫–∞ –ø–æ—Ä–æ–∂–Ω—è*\n\n–°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤—É —Ü—ñ–ª—å, —â–æ–± –ø–æ—á–∞—Ç–∏ –Ω–∞–∫–æ–ø–∏—á—É–≤–∞—Ç–∏:"

    await send_or_edit_menu(update, context, text, reply_markup, parse_mode="Markdown")


async def handle_piggy_bank_create(update: Update, context: CallbackContext):
    await log_command_usage(update, context)

    user_id = update.callback_query.from_user.id
    await update.callback_query.answer()

    context.user_data.pop('piggy_bank_name', None)
    context.user_data.pop('piggy_bank_amount', None)
    context.user_data.pop('piggy_bank_state', None)

    context.user_data['piggy_bank_state'] = 'waiting_for_name'

    keyboard = [[InlineKeyboardButton("üîô –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data='piggy_bank')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await send_or_edit_menu(update, context, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ü—ñ–ª—ñ:", reply_markup)

    return 'waiting_for_name'


async def handle_piggy_bank_name_input(update: Update, context: CallbackContext):
    await log_command_usage(update, context)

    user_id = update.message.from_user.id
    name = update.message.text

    context.user_data['piggy_bank_name'] = name

    context.user_data['piggy_bank_state'] = 'waiting_for_amount'

    keyboard = [[InlineKeyboardButton("üîô –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data='piggy_bank')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        text=f"–¶—ñ–ª—å: *{name}*\n\n–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É, —è–∫—É —Ö–æ—á–µ—Ç–µ –Ω–∞–∫–æ–ø–∏—á–∏—Ç–∏:",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )

    return 'waiting_for_amount'


async def handle_piggy_bank_amount_input(update: Update, context: CallbackContext):
    await log_command_usage(update, context)

    user_id = update.message.from_user.id
    amount_text = update.message.text

    try:
        amount = float(amount_text)
        if amount <= 0:
            raise ValueError("Amount must be positive")

        name = context.user_data.get('piggy_bank_name', '')

        context.user_data['piggy_bank_state'] = 'waiting_for_description'
        context.user_data['piggy_bank_amount'] = amount

        keyboard = [
            [InlineKeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data='piggy_bank_skip_description')],
            [InlineKeyboardButton("üîô –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data='piggy_bank')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            text=f"–¶—ñ–ª—å: *{name}*\n–°—É–º–∞: *{amount} –≥—Ä–Ω*\n\n–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å —Ü—ñ–ª—ñ (–∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'):",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )

        return 'waiting_for_description'
    except ValueError:
        keyboard = [[InlineKeyboardButton("üîô –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data='piggy_bank')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            text="‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É (–¥–æ–¥–∞—Ç–Ω—î —á–∏—Å–ª–æ):",
            reply_markup=reply_markup
        )

        return 'waiting_for_amount'


async def handle_piggy_bank_description_input(update: Update, context: CallbackContext):
    await log_command_usage(update, context)

    user_id = update.message.from_user.id
    description = update.message.text

    name = context.user_data.get('piggy_bank_name', '')
    amount = context.user_data.get('piggy_bank_amount', 0)

    success = add_piggy_bank_goal(user_id, name, amount, description)

    context.user_data.pop('piggy_bank_name', None)
    context.user_data.pop('piggy_bank_amount', None)
    context.user_data.pop('piggy_bank_state', None)

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ —Å–∫–∞—Ä–±–Ω–∏—á–∫–∏", callback_data='piggy_bank')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if success:
        await update.message.reply_text(
            text=f"‚úÖ –¶—ñ–ª—å *{name}* –Ω–∞ —Å—É–º—É *{amount} –≥—Ä–Ω* —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞!",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            text="‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ü—ñ–ª—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=reply_markup
        )

    return ConversationHandler.END


async def handle_piggy_bank_skip_description(update: Update, context: CallbackContext):
    await log_command_usage(update, context)

    user_id = update.callback_query.from_user.id
    await update.callback_query.answer()

    name = context.user_data.get('piggy_bank_name', '')
    amount = context.user_data.get('piggy_bank_amount', 0)

    success = add_piggy_bank_goal(user_id, name, amount, "")

    context.user_data.pop('piggy_bank_name', None)
    context.user_data.pop('piggy_bank_amount', None)
    context.user_data.pop('piggy_bank_state', None)

    if success:
        text = f"‚úÖ –¶—ñ–ª—å *{name}* –Ω–∞ —Å—É–º—É *{amount} –≥—Ä–Ω* —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞!"
    else:
        text = "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ü—ñ–ª—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."

    await handle_piggy_bank_callback(update, context)

    return ConversationHandler.END


async def handle_piggy_bank_view(update: Update, context: CallbackContext):
    await log_command_usage(update, context)

    user_id = update.callback_query.from_user.id
    await update.callback_query.answer()

    callback_data = update.callback_query.data
    goal_id = int(callback_data.split('_')[-1])

    goal = get_piggy_bank_goal(user_id, goal_id)

    if not goal:
        await handle_piggy_bank_callback(update, context)
        return

    goal_id, name, target_amount, current_amount, description, created_date, completed = goal

    progress = int((current_amount / target_amount) * 100) if target_amount > 0 else 0

    text = f"üê∑ *{name}*\n\n"
    text += f"üí∞ –¶—ñ–ª—å: *{target_amount} –≥—Ä–Ω*\n"
    text += f"üíµ –ù–∞–∫–æ–ø–∏—á–µ–Ω–æ: *{current_amount} –≥—Ä–Ω*\n"
    text += f"üìä –ü—Ä–æ–≥—Ä–µ—Å: *{progress}%*\n"

    if description:
        text += f"\nüìù –û–ø–∏—Å: _{description}_\n"

    text += f"\nüìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {created_date}"

    keyboard = []

    if not completed:
        keyboard.append([InlineKeyboardButton("üí∞ –î–æ–¥–∞—Ç–∏ –∫–æ—à—Ç–∏", callback_data=f'piggy_bank_add_funds_{goal_id}')])

    keyboard.append([InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Ü—ñ–ª—å", callback_data=f'piggy_bank_delete_{goal_id}')])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ —Å–∫–∞—Ä–±–Ω–∏—á–∫–∏", callback_data='piggy_bank')])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await send_or_edit_menu(update, context, text, reply_markup, parse_mode="Markdown")


async def handle_piggy_bank_add_funds(update: Update, context: CallbackContext):
    await log_command_usage(update, context)

    user_id = update.callback_query.from_user.id
    await update.callback_query.answer()

    callback_data = update.callback_query.data
    goal_id = int(callback_data.split('_')[-1])

    goal = get_piggy_bank_goal(user_id, goal_id)

    if not goal or goal[6]:
        await handle_piggy_bank_callback(update, context)
        return

    context.user_data.pop('piggy_bank_name', None)
    context.user_data.pop('piggy_bank_amount', None)
    context.user_data.pop('piggy_bank_state', None)
    context.user_data.pop('piggy_bank_goal_id', None)

    context.user_data['piggy_bank_goal_id'] = goal_id
    context.user_data['piggy_bank_state'] = 'waiting_for_funds'

    keyboard = [[InlineKeyboardButton("üîô –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f'piggy_bank_view_{goal_id}')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    goal_id, name, target_amount, current_amount, _, _, _ = goal

    budgets = get_budgets(user_id)
    total_budget = sum(amount for _, amount in budgets)

    text = (f"üê∑ *{name}*\n\n"
            f"üí∞ –¶—ñ–ª—å: *{target_amount} –≥—Ä–Ω*\n"
            f"üíµ –ù–∞–∫–æ–ø–∏—á–µ–Ω–æ: *{current_amount} –≥—Ä–Ω*\n"
            f"üí∏ –ó–∞–ª–∏—à–∏–ª–æ—Å—å: *{target_amount - current_amount} –≥—Ä–Ω*\n\n"
            f"üíº –î–æ—Å—Ç—É–ø–Ω–æ –≤ –±—é–¥–∂–µ—Ç—ñ: *{total_budget} –≥—Ä–Ω*\n\n"
            f"–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É, —è–∫—É —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏:")

    await send_or_edit_menu(update, context, text, reply_markup, parse_mode="Markdown")

    return 'waiting_for_funds'


async def handle_piggy_bank_funds_input(update: Update, context: CallbackContext):
    await log_command_usage(update, context)

    user_id = update.message.from_user.id
    amount_text = update.message.text

    try:
        amount = float(amount_text)
        if amount <= 0:
            raise ValueError("Amount must be positive")

        goal_id = context.user_data.get('piggy_bank_goal_id')

        if not goal_id:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ —Å–∫–∞—Ä–±–Ω–∏—á–∫–∏", callback_data='piggy_bank')]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                text="‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                reply_markup=reply_markup
            )
            return ConversationHandler.END

        goal = get_piggy_bank_goal(user_id, goal_id)

        if not goal:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ —Å–∫–∞—Ä–±–Ω–∏—á–∫–∏", callback_data='piggy_bank')]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                text="‚ùå –¶—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                reply_markup=reply_markup
            )
            return ConversationHandler.END

        goal_id, name, target_amount, current_amount, _, _, completed = goal

        budgets = get_budgets(user_id)
        total_budget = sum(amount for _, amount in budgets)

        if total_budget < amount:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ —Ü—ñ–ª—ñ", callback_data=f'piggy_bank_view_{goal_id}')]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                text=f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ —É –±—é–¥–∂–µ—Ç—ñ. –î–æ—Å—Ç—É–ø–Ω–æ: *{total_budget} –≥—Ä–Ω*",
                parse_mode="Markdown",
                reply_markup=reply_markup
            )
            return ConversationHandler.END

        success = add_funds_to_goal(user_id, goal_id, amount)

        context.user_data.pop('piggy_bank_goal_id', None)
        context.user_data.pop('piggy_bank_state', None)

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ —Ü—ñ–ª—ñ", callback_data=f'piggy_bank_view_{goal_id}')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if success:
            updated_goal = get_piggy_bank_goal(user_id, goal_id)
            _, _, _, new_current_amount, _, _, new_completed = updated_goal

            if new_completed and not completed:
                await update.message.reply_text(
                    text=f"üéâ –í—ñ—Ç–∞—î–º–æ! –í–∏ –¥–æ—Å—è–≥–ª–∏ —Ü—ñ–ª—ñ *{name}*!\n\n"
                         f"üí∞ –ù–∞–∫–æ–ø–∏—á–µ–Ω–æ: *{new_current_amount} –≥—Ä–Ω*\n"
                         f"üí∏ –ö–æ—à—Ç–∏ —Å–ø–∏—Å–∞–Ω—ñ –∑ –±—é–¥–∂–µ—Ç—É.",
                    parse_mode="Markdown",
                    reply_markup=reply_markup
                )
            else:
                await update.message.reply_text(
                    text=f"‚úÖ *{amount} –≥—Ä–Ω* —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ —Ü—ñ–ª—ñ *{name}*!\n\n"
                         f"üí∞ –ü–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å: *{new_current_amount} / {target_amount} –≥—Ä–Ω*\n"
                         f"üí∏ –ö–æ—à—Ç–∏ —Å–ø–∏—Å–∞–Ω—ñ –∑ –±—é–¥–∂–µ—Ç—É.",
                    parse_mode="Markdown",
                    reply_markup=reply_markup
                )
        else:
            await update.message.reply_text(
                text="‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–æ—à—Ç—ñ–≤. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                reply_markup=reply_markup
            )

        return ConversationHandler.END
    except ValueError:
        goal_id = context.user_data.get('piggy_bank_goal_id')
        keyboard = [[InlineKeyboardButton("üîô –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f'piggy_bank_view_{goal_id}')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            text="‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É (–¥–æ–¥–∞—Ç–Ω—î —á–∏—Å–ª–æ):",
            reply_markup=reply_markup
        )

        return 'waiting_for_funds'


async def handle_piggy_bank_delete(update: Update, context: CallbackContext):
    await log_command_usage(update, context)

    user_id = update.callback_query.from_user.id
    await update.callback_query.answer()

    callback_data = update.callback_query.data
    goal_id = int(callback_data.split('_')[-1])

    goal = get_piggy_bank_goal(user_id, goal_id)

    if not goal:
        await handle_piggy_bank_callback(update, context)
        return

    goal_id, name, _, _, _, _, _ = goal

    keyboard = [
        [InlineKeyboardButton("‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏", callback_data=f'piggy_bank_delete_confirm_{goal_id}')],
        [InlineKeyboardButton("‚ùå –ù—ñ, —Å–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f'piggy_bank_view_{goal_id}')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await send_or_edit_menu(
        update,
        context,
        f"‚ùì –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—ñ–ª—å *{name}*?",
        reply_markup,
        parse_mode="Markdown"
    )


async def handle_piggy_bank_delete_confirm(update: Update, context: CallbackContext):
    await log_command_usage(update, context)

    user_id = update.callback_query.from_user.id
    await update.callback_query.answer()

    callback_data = update.callback_query.data
    goal_id = int(callback_data.split('_')[-1])

    goal = get_piggy_bank_goal(user_id, goal_id)

    if not goal:
        await handle_piggy_bank_callback(update, context)
        return

    goal_id, name, _, _, _, _, _ = goal

    success = delete_piggy_bank_goal(user_id, goal_id)

    if success:
        await send_or_edit_menu(
            update,
            context,
            f"‚úÖ –¶—ñ–ª—å *{name}* —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∞!",
            None,
            parse_mode="Markdown"
        )
        import asyncio
        await asyncio.sleep(1)
        await handle_piggy_bank_callback(update, context)
    else:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ —Ü—ñ–ª—ñ", callback_data=f'piggy_bank_view_{goal_id}')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await send_or_edit_menu(
            update,
            context,
            "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Ü—ñ–ª—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup
        )


piggy_bank_create_conversation = ConversationHandler(
    entry_points=[CallbackQueryHandler(handle_piggy_bank_create, pattern='^piggy_bank_create$')],
    states={
        'waiting_for_name': [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_piggy_bank_name_input)],
        'waiting_for_amount': [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_piggy_bank_amount_input)],
        'waiting_for_description': [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_piggy_bank_description_input),
            CallbackQueryHandler(handle_piggy_bank_skip_description, pattern='^piggy_bank_skip_description$')
        ],
    },
    fallbacks=[
        CallbackQueryHandler(handle_piggy_bank_callback, pattern='^piggy_bank$'),
        CallbackQueryHandler(handle_piggy_bank_create, pattern='^piggy_bank_create$'),
        MessageHandler(filters.COMMAND, handle_piggy_bank_callback)
    ],
    name="piggy_bank_create",
    persistent=False
)

piggy_bank_add_funds_conversation = ConversationHandler(
    entry_points=[CallbackQueryHandler(handle_piggy_bank_add_funds, pattern='^piggy_bank_add_funds_[0-9]+$')],
    states={
        'waiting_for_funds': [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_piggy_bank_funds_input)],
    },
    fallbacks=[
        CallbackQueryHandler(handle_piggy_bank_view, pattern='^piggy_bank_view_'),
        CallbackQueryHandler(handle_piggy_bank_callback, pattern='^piggy_bank$'),
        MessageHandler(filters.COMMAND, handle_piggy_bank_callback)
    ],
    name="piggy_bank_add_funds",
    persistent=False
)

budgeting_handler = CallbackQueryHandler(handle_budgeting_callback, pattern='^budgeting$')
goal_handler = CallbackQueryHandler(handle_goal_callback, pattern='^goal$')
budget_handler = CallbackQueryHandler(handle_budget_callback, pattern='^budget$')
goal_command_handler = CommandHandler('goal', handle_goal_callback)
budget_command_handler = CommandHandler('budget', handle_budget_callback)
track_goals_handler = CommandHandler('track_goals', track_goals)

piggy_bank_handler = CallbackQueryHandler(handle_piggy_bank_callback, pattern='^piggy_bank$')
piggy_bank_view_handler = CallbackQueryHandler(handle_piggy_bank_view, pattern='^piggy_bank_view_')
piggy_bank_delete_handler = CallbackQueryHandler(handle_piggy_bank_delete, pattern='^piggy_bank_delete_[0-9]+$')
piggy_bank_delete_confirm_handler = CallbackQueryHandler(handle_piggy_bank_delete_confirm,
                                                         pattern='^piggy_bank_delete_confirm_')
