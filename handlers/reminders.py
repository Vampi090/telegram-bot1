from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, CallbackQueryHandler, CommandHandler, filters, MessageHandler, \
    ConversationHandler
from datetime import datetime, timedelta
import calendar
from keyboards.reminder_menu import reminder_menu_keyboard
from services.logging_service import log_command_usage
from services.database_service import (
    add_reminder, get_reminders, get_reminder,
    update_reminder, delete_reminder, mark_reminder_completed
)
from .budget import handle_budgeting_callback

TITLE, DATETIME, EDIT_TITLE, EDIT_DATETIME, SELECT_DATE, SELECT_TIME = range(6)


async def handle_reminder_callback(update: Update, context: CallbackContext):
    await log_command_usage(update, context)

    context.user_data.pop('reminder_title', None)
    context.user_data.pop('reminder_id', None)

    user_id = None
    if update.message:
        user_id = update.message.from_user.id
    elif update.callback_query:
        user_id = update.callback_query.from_user.id
        await update.callback_query.answer()

    if not user_id:
        return

    reply_markup = reminder_menu_keyboard()

    if update.callback_query:
        await update.callback_query.edit_message_text(
            text="‚è∞ –ú–µ–Ω—é –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            text="‚è∞ –ú–µ–Ω—é –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å",
            reply_markup=reply_markup
        )


async def handle_create_reminder(update: Update, context: CallbackContext):
    await log_command_usage(update, context)

    user_id = update.callback_query.from_user.id
    await update.callback_query.answer()

    context.user_data.pop('reminder_title', None)

    keyboard = [[InlineKeyboardButton("üîô –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data='reminder')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(
        text="–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:",
        reply_markup=reply_markup
    )

    return TITLE


async def handle_reminder_title_input(update: Update, context: CallbackContext):
    await log_command_usage(update, context)

    user_id = update.message.from_user.id
    title = update.message.text

    context.user_data['reminder_title'] = title

    now = datetime.now()
    context.user_data['reminder_year'] = now.year
    context.user_data['reminder_month'] = now.month
    context.user_data['reminder_day'] = now.day
    context.user_data['reminder_hour'] = now.hour
    context.user_data['reminder_minute'] = 0

    keyboard = generate_date_selection_keyboard(context)

    keyboard.append([InlineKeyboardButton("üîô –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data='reminder')])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        text=f"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: *{title}*\n\n–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )

    return SELECT_DATE


def generate_date_selection_keyboard(context):
    year = context.user_data.get('reminder_year', datetime.now().year)
    month = context.user_data.get('reminder_month', datetime.now().month)

    now = datetime.now()

    keyboard = []

    month_names = [
        "–°—ñ—á–µ–Ω—å", "–õ—é—Ç–∏–π", "–ë–µ—Ä–µ–∑–µ–Ω—å", "–ö–≤—ñ—Ç–µ–Ω—å", "–¢—Ä–∞–≤–µ–Ω—å", "–ß–µ—Ä–≤–µ–Ω—å",
        "–õ–∏–ø–µ–Ω—å", "–°–µ—Ä–ø–µ–Ω—å", "–í–µ—Ä–µ—Å–µ–Ω—å", "–ñ–æ–≤—Ç–µ–Ω—å", "–õ–∏—Å—Ç–æ–ø–∞–¥", "–ì—Ä—É–¥–µ–Ω—å"
    ]
    month_name = month_names[month - 1]

    nav_row = []

    prev_month = month - 1
    prev_year = year
    if prev_month < 1:
        prev_month = 12
        prev_year -= 1
    nav_row.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"date_prev_{prev_year}_{prev_month}"))

    nav_row.append(InlineKeyboardButton(f"{month_name} {year}", callback_data="ignore"))

    next_month = month + 1
    next_year = year
    if next_month > 12:
        next_month = 1
        next_year += 1
    nav_row.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"date_next_{next_year}_{next_month}"))

    keyboard.append(nav_row)

    days_of_week = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–ù–¥"]
    keyboard.append([InlineKeyboardButton(day, callback_data="ignore") for day in days_of_week])

    first_day, num_days = calendar.monthrange(year, month)

    day = 1
    for week in range(6):
        week_buttons = []
        for weekday in range(7):
            if week == 0 and weekday < first_day:
                week_buttons.append(InlineKeyboardButton(" ", callback_data="ignore"))
            elif day > num_days:
                week_buttons.append(InlineKeyboardButton(" ", callback_data="ignore"))
            else:
                is_past = False
                if year < now.year or (year == now.year and month < now.month) or (
                        year == now.year and month == now.month and day < now.day):
                    is_past = True

                is_selected = day == context.user_data.get('reminder_day', 0)

                button_text = str(day)
                if is_selected:
                    button_text = f"‚úì{day}"

                callback_data = f"date_{year}_{month}_{day}" if not is_past else "ignore"

                week_buttons.append(InlineKeyboardButton(button_text, callback_data=callback_data))

                day += 1

        if any(button.text.strip() != "" for button in week_buttons):
            keyboard.append(week_buttons)

    keyboard.append([InlineKeyboardButton("‚è∞ –û–±—Ä–∞—Ç–∏ —á–∞—Å", callback_data="select_time")])

    return keyboard


async def handle_date_selection(update: Update, context: CallbackContext):
    await log_command_usage(update, context)

    query = update.callback_query
    await query.answer()

    callback_data = query.data
    if callback_data.startswith("date_prev_") or callback_data.startswith("date_next_"):
        parts = callback_data.split("_")
        year = int(parts[2])
        month = int(parts[3])

        context.user_data['reminder_year'] = year
        context.user_data['reminder_month'] = month

        keyboard = generate_date_selection_keyboard(context)
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_reply_markup(reply_markup=reply_markup)
        return SELECT_DATE

    elif callback_data.startswith("date_"):
        parts = callback_data.split("_")
        year = int(parts[1])
        month = int(parts[2])
        day = int(parts[3])

        context.user_data['reminder_year'] = year
        context.user_data['reminder_month'] = month
        context.user_data['reminder_day'] = day

        keyboard = generate_date_selection_keyboard(context)
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_reply_markup(reply_markup=reply_markup)
        return SELECT_DATE

    elif callback_data == "select_time":
        keyboard = generate_time_selection_keyboard(context)
        reply_markup = InlineKeyboardMarkup(keyboard)

        title = context.user_data.get('reminder_title', '')
        year = context.user_data.get('reminder_year')
        month = context.user_data.get('reminder_month')
        day = context.user_data.get('reminder_day')

        date_str = f"{day:02d}.{month:02d}.{year}"

        await query.edit_message_text(
            text=f"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: *{title}*\n\n–î–∞—Ç–∞: *{date_str}*\n\n–û–±–µ—Ä—ñ—Ç—å —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:\n(—Å–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –≥–æ–¥–∏–Ω—É, –ø–æ—Ç—ñ–º —Ö–≤–∏–ª–∏–Ω–∏)",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
        return SELECT_TIME

    return SELECT_DATE


def generate_time_selection_keyboard(context):
    hour = context.user_data.get('reminder_hour', 12)
    minute = context.user_data.get('reminder_minute', 0)

    keyboard = []

    keyboard.append([InlineKeyboardButton("üïê –ì–æ–¥–∏–Ω–∏", callback_data="ignore")])

    hours_row = []
    for h in range(0, 24, 4):
        hours_row = []
        for i in range(4):
            if h + i < 24:
                button_text = f"{h + i:02d}" + ("‚úì" if h + i == hour else "")
                hours_row.append(InlineKeyboardButton(button_text, callback_data=f"hour_{h + i}"))
        keyboard.append(hours_row)

    keyboard.append([InlineKeyboardButton("‚è± –•–≤–∏–ª–∏–Ω–∏", callback_data="ignore")])

    for row_start in range(0, 60, 20):
        minutes_row = []
        for m in range(row_start, min(row_start + 20, 60), 5):
            button_text = f"{m:02d}" + ("‚úì" if m == minute else "")
            minutes_row.append(InlineKeyboardButton(button_text, callback_data=f"minute_{m}"))
        keyboard.append(minutes_row)

    keyboard.append([InlineKeyboardButton("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è", callback_data="save_reminder")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏", callback_data="back_to_date")])

    return keyboard


async def handle_time_selection(update: Update, context: CallbackContext):
    await log_command_usage(update, context)

    query = update.callback_query
    await query.answer()

    callback_data = query.data

    if callback_data.startswith("hour_"):
        hour = int(callback_data.split("_")[1])
        context.user_data['reminder_hour'] = hour

        keyboard = generate_time_selection_keyboard(context)
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_reply_markup(reply_markup=reply_markup)
        return SELECT_TIME

    elif callback_data.startswith("minute_"):
        minute = int(callback_data.split("_")[1])
        context.user_data['reminder_minute'] = minute

        keyboard = generate_time_selection_keyboard(context)
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_reply_markup(reply_markup=reply_markup)
        return SELECT_TIME

    elif callback_data == "back_to_date":
        keyboard = generate_date_selection_keyboard(context)
        reply_markup = InlineKeyboardMarkup(keyboard)

        title = context.user_data.get('reminder_title', '')

        await query.edit_message_text(
            text=f"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: *{title}*\n\n–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
        return SELECT_DATE

    elif callback_data == "save_reminder":
        user_id = query.from_user.id
        year = context.user_data.get('reminder_year')
        month = context.user_data.get('reminder_month')
        day = context.user_data.get('reminder_day')
        hour = context.user_data.get('reminder_hour')
        minute = context.user_data.get('reminder_minute')

        try:
            reminder_datetime = datetime(year, month, day, hour, minute)
            reminder_datetime_str = reminder_datetime.strftime("%Y-%m-%d %H:%M:%S")

            if reminder_datetime <= datetime.now():
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_date")]]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await query.edit_message_text(
                    text="‚ùå –î–∞—Ç–∞ —Ç–∞ —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –º–∞—é—Ç—å –±—É—Ç–∏ –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –¥–∞—Ç—É –∞–±–æ —á–∞—Å.",
                    reply_markup=reply_markup
                )
                return SELECT_TIME

            reminder_id = context.user_data.get('reminder_id')

            if reminder_id:
                success = update_reminder(user_id, reminder_id, reminder_datetime=reminder_datetime_str)
                keyboard = [
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è", callback_data=f'view_reminder_{reminder_id}')]]
                reply_markup = InlineKeyboardMarkup(keyboard)

                if success:
                    await query.edit_message_text(
                        text=f"‚úÖ –î–∞—Ç–∞ —Ç–∞ —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω—ñ –Ω–∞: *{reminder_datetime.strftime('%d.%m.%Y %H:%M')}*",
                        parse_mode="Markdown",
                        reply_markup=reply_markup
                    )
                else:
                    await query.edit_message_text(
                        text="‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–º—ñ–Ω–∏ –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                        reply_markup=reply_markup
                    )
            else:
                title = context.user_data.get('reminder_title', '')
                reminder_id = add_reminder(user_id, title, reminder_datetime_str)

                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å", callback_data='reminder')]]
                reply_markup = InlineKeyboardMarkup(keyboard)

                if reminder_id:
                    await query.edit_message_text(
                        text=f"‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\n"
                             f"üìù *{title}*\n"
                             f"‚è∞ {reminder_datetime.strftime('%d.%m.%Y %H:%M')}",
                        parse_mode="Markdown",
                        reply_markup=reply_markup
                    )
                else:
                    await query.edit_message_text(
                        text="‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                        reply_markup=reply_markup
                    )

            context.user_data.pop('reminder_title', None)
            context.user_data.pop('reminder_year', None)
            context.user_data.pop('reminder_month', None)
            context.user_data.pop('reminder_day', None)
            context.user_data.pop('reminder_hour', None)
            context.user_data.pop('reminder_minute', None)
            context.user_data.pop('reminder_id', None)

            return ConversationHandler.END
        except ValueError:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_date")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                text="‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥–∞—Ç–∞ –∞–±–æ —á–∞—Å. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –¥–∞—Ç—É –∞–±–æ —á–∞—Å.",
                reply_markup=reply_markup
            )
            return SELECT_TIME

    return SELECT_TIME


async def handle_reminder_datetime_input(update: Update, context: CallbackContext):
    await log_command_usage(update, context)

    user_id = update.message.from_user.id
    datetime_text = update.message.text

    try:
        reminder_datetime = datetime.strptime(datetime_text, "%Y-%m-%d %H:%M")
        reminder_datetime_str = reminder_datetime.strftime("%Y-%m-%d %H:%M:%S")

        title = context.user_data.get('reminder_title', '')

        reminder_id = add_reminder(user_id, title, reminder_datetime_str)

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å", callback_data='reminder')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if reminder_id:
            await update.message.reply_text(
                text=f"‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\n"
                     f"üìù *{title}*\n"
                     f"‚è∞ {reminder_datetime.strftime('%d.%m.%Y %H:%M')}",
                parse_mode="Markdown",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                text="‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                reply_markup=reply_markup
            )

        context.user_data.pop('reminder_title', None)

        return ConversationHandler.END
    except ValueError:
        keyboard = [[InlineKeyboardButton("üîô –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data='reminder')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            text="‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î –ì–ì:–•–•\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 2023-12-31 23:59",
            reply_markup=reply_markup
        )

        return DATETIME


async def handle_list_reminders(update: Update, context: CallbackContext):
    await log_command_usage(update, context)

    user_id = update.callback_query.from_user.id
    await update.callback_query.answer()

    reminders = get_reminders(user_id)

    # Check if we're coming from the debt menu
    from_debt_menu = context.user_data.get('return_to_debt_menu', False)
    back_callback = 'remind_debt' if from_debt_menu else 'reminder'

    if not reminders:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_callback)]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.edit_message_text(
            text="üìã –£ –≤–∞—Å –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å.",
            reply_markup=reply_markup
        )
        return

    keyboard = []

    for reminder_id, title, reminder_datetime, _, _ in reminders:
        dt = datetime.strptime(reminder_datetime, "%Y-%m-%d %H:%M:%S")
        formatted_datetime = dt.strftime("%d.%m.%Y %H:%M")

        button_text = f"{title} - {formatted_datetime}"

        keyboard.append([InlineKeyboardButton(button_text, callback_data=f'view_reminder_{reminder_id}')])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_callback)])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(
        text="üìã –í–∞—à—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:",
        reply_markup=reply_markup
    )


async def handle_view_reminder(update: Update, context: CallbackContext):
    await log_command_usage(update, context)

    user_id = update.callback_query.from_user.id
    await update.callback_query.answer()

    callback_data = update.callback_query.data
    reminder_id = int(callback_data.split('_')[-1])

    reminder = get_reminder(user_id, reminder_id)

    if not reminder:
        await handle_list_reminders(update, context)
        return

    reminder_id, title, reminder_datetime, created_at, is_completed = reminder

    dt = datetime.strptime(reminder_datetime, "%Y-%m-%d %H:%M:%S")
    created = datetime.strptime(created_at, "%Y-%m-%d %H:%M:%S")

    formatted_datetime = dt.strftime("%d.%m.%Y %H:%M")
    formatted_created = created.strftime("%d.%m.%Y %H:%M")

    text = f"üìù *{title}*\n\n"
    text += f"‚è∞ –î–∞—Ç–∞ —Ç–∞ —á–∞—Å: *{formatted_datetime}*\n"
    text += f"üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {formatted_created}\n"

    status = "‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ" if is_completed else "‚è≥ –ê–∫—Ç–∏–≤–Ω–æ"
    text += f"üìä –°—Ç–∞—Ç—É—Å: *{status}*"

    keyboard = []

    if not is_completed:
        keyboard.append([InlineKeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏", callback_data=f'edit_reminder_{reminder_id}')])
        keyboard.append(
            [InlineKeyboardButton("‚úÖ –í—ñ–¥–º—ñ—Ç–∏—Ç–∏ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ", callback_data=f'complete_reminder_{reminder_id}')])

    keyboard.append([InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f'delete_reminder_{reminder_id}')])

    # Check if we're coming from the debt menu
    from_debt_menu = context.user_data.get('return_to_debt_menu', False)
    list_callback = 'view_all_reminders' if from_debt_menu else 'list_reminders'

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É", callback_data=list_callback)])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(
        text=text,
        parse_mode="Markdown",
        reply_markup=reply_markup
    )


async def handle_edit_reminder(update: Update, context: CallbackContext):
    await log_command_usage(update, context)

    user_id = update.callback_query.from_user.id
    await update.callback_query.answer()

    callback_data = update.callback_query.data
    reminder_id = int(callback_data.split('_')[-1])

    context.user_data['reminder_id'] = reminder_id

    reminder = get_reminder(user_id, reminder_id)

    if not reminder:
        await handle_list_reminders(update, context)
        return

    _, title, reminder_datetime, _, _ = reminder

    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–∫—Å—Ç", callback_data='edit_reminder_title')],
        [InlineKeyboardButton("‚è∞ –ó–º—ñ–Ω–∏—Ç–∏ –¥–∞—Ç—É —Ç–∞ —á–∞—Å", callback_data='edit_reminder_datetime')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'view_reminder_{reminder_id}')]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(
        text=f"üìù –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: *{title}*\n\n–û–±–µ—Ä—ñ—Ç—å, —â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏:",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )


async def handle_edit_reminder_title(update: Update, context: CallbackContext):
    await log_command_usage(update, context)

    user_id = update.callback_query.from_user.id
    await update.callback_query.answer()

    reminder_id = context.user_data.get('reminder_id')

    if not reminder_id:
        await handle_list_reminders(update, context)
        return

    reminder = get_reminder(user_id, reminder_id)

    if not reminder:
        await handle_list_reminders(update, context)
        return

    _, title, _, _, _ = reminder

    keyboard = [[InlineKeyboardButton("üîô –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f'view_reminder_{reminder_id}')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(
        text=f"–ü–æ—Ç–æ—á–Ω–∏–π —Ç–µ–∫—Å—Ç: *{title}*\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )

    return EDIT_TITLE


async def handle_edit_reminder_title_input(update: Update, context: CallbackContext):
    await log_command_usage(update, context)

    user_id = update.message.from_user.id
    new_title = update.message.text

    reminder_id = context.user_data.get('reminder_id')

    if not reminder_id:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å", callback_data='reminder')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            text="‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=reply_markup
        )
        return ConversationHandler.END

    success = update_reminder(user_id, reminder_id, title=new_title)

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è", callback_data=f'view_reminder_{reminder_id}')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if success:
        await update.message.reply_text(
            text=f"‚úÖ –¢–µ–∫—Å—Ç –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: *{new_title}*",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            text="‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–º—ñ–Ω–∏ —Ç–µ–∫—Å—Ç—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=reply_markup
        )

    return ConversationHandler.END


async def handle_edit_reminder_datetime(update: Update, context: CallbackContext):
    await log_command_usage(update, context)

    user_id = update.callback_query.from_user.id
    await update.callback_query.answer()

    reminder_id = context.user_data.get('reminder_id')

    if not reminder_id:
        await handle_list_reminders(update, context)
        return

    reminder = get_reminder(user_id, reminder_id)

    if not reminder:
        await handle_list_reminders(update, context)
        return

    _, title, reminder_datetime, _, _ = reminder

    dt = datetime.strptime(reminder_datetime, "%Y-%m-%d %H:%M:%S")

    context.user_data['reminder_year'] = dt.year
    context.user_data['reminder_month'] = dt.month
    context.user_data['reminder_day'] = dt.day
    context.user_data['reminder_hour'] = dt.hour
    context.user_data['reminder_minute'] = dt.minute

    keyboard = generate_date_selection_keyboard(context)

    keyboard.append([InlineKeyboardButton("üîô –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f'view_reminder_{reminder_id}')])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(
        text=f"–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: *{title}*\n\n–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤—É –¥–∞—Ç—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )

    return SELECT_DATE

async def handle_edit_reminder_datetime_input(update: Update, context: CallbackContext):
    await log_command_usage(update, context)

    user_id = update.message.from_user.id
    datetime_text = update.message.text

    reminder_id = context.user_data.get('reminder_id')

    if not reminder_id:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å", callback_data='reminder')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            text="‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=reply_markup
        )
        return ConversationHandler.END

    try:
        reminder_datetime = datetime.strptime(datetime_text, "%Y-%m-%d %H:%M")
        reminder_datetime_str = reminder_datetime.strftime("%Y-%m-%d %H:%M:%S")

        success = update_reminder(user_id, reminder_id, reminder_datetime=reminder_datetime_str)

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è", callback_data=f'view_reminder_{reminder_id}')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if success:
            await update.message.reply_text(
                text=f"‚úÖ –î–∞—Ç–∞ —Ç–∞ —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω—ñ –Ω–∞: *{reminder_datetime.strftime('%d.%m.%Y %H:%M')}*",
                parse_mode="Markdown",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                text="‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–º—ñ–Ω–∏ –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                reply_markup=reply_markup
            )

        return ConversationHandler.END
    except ValueError:
        keyboard = [[InlineKeyboardButton("üîô –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f'view_reminder_{reminder_id}')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            text="‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î –ì–ì:–•–•\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 2023-12-31 23:59",
            reply_markup=reply_markup
        )

        return EDIT_DATETIME

async def handle_complete_reminder(update: Update, context: CallbackContext):
    await log_command_usage(update, context)

    user_id = update.callback_query.from_user.id
    await update.callback_query.answer()

    callback_data = update.callback_query.data
    reminder_id = int(callback_data.split('_')[-1])

    reminder = get_reminder(user_id, reminder_id)

    if not reminder:
        await handle_list_reminders(update, context)
        return

    _, title, _, _, _ = reminder

    success = mark_reminder_completed(user_id, reminder_id)

    if success:
        # Check if we're coming from the debt menu
        from_debt_menu = context.user_data.get('return_to_debt_menu', False)
        list_callback = 'view_all_reminders' if from_debt_menu else 'list_reminders'

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É", callback_data=list_callback)]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.edit_message_text(
            text=f"‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è *{title}* –≤—ñ–¥–º—ñ—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ.",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
    else:
        await handle_view_reminder(update, context)

async def handle_delete_reminder(update: Update, context: CallbackContext):
    await log_command_usage(update, context)

    user_id = update.callback_query.from_user.id
    await update.callback_query.answer()

    callback_data = update.callback_query.data
    reminder_id = int(callback_data.split('_')[-1])

    reminder = get_reminder(user_id, reminder_id)

    if not reminder:
        await handle_list_reminders(update, context)
        return

    _, title, _, _, _ = reminder

    keyboard = [
        [InlineKeyboardButton("‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏", callback_data=f'delete_reminder_confirm_{reminder_id}')],
        [InlineKeyboardButton("‚ùå –ù—ñ, —Å–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f'view_reminder_{reminder_id}')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(
        text=f"‚ùì –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è *{title}*?",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )

async def handle_delete_reminder_confirm(update: Update, context: CallbackContext):
    await log_command_usage(update, context)

    user_id = update.callback_query.from_user.id
    await update.callback_query.answer()

    callback_data = update.callback_query.data
    reminder_id = int(callback_data.split('_')[-1])

    reminder = get_reminder(user_id, reminder_id)

    if not reminder:
        await handle_list_reminders(update, context)
        return

    _, title, _, _, _ = reminder

    success = delete_reminder(user_id, reminder_id)

    if success:
        # Check if we're coming from the debt menu
        from_debt_menu = context.user_data.get('return_to_debt_menu', False)
        list_callback = 'view_all_reminders' if from_debt_menu else 'list_reminders'

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É", callback_data=list_callback)]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.edit_message_text(
            text=f"‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è *{title}* —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
    else:
        await handle_view_reminder(update, context)

create_reminder_conversation = ConversationHandler(
    entry_points=[
        CallbackQueryHandler(handle_create_reminder, pattern='^create_reminder$'),
        CallbackQueryHandler(handle_list_reminders, pattern='^list_reminders$'),
        CallbackQueryHandler(handle_budgeting_callback, pattern='^budgeting$')
    ],
    states={
        TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_reminder_title_input)],
        DATETIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_reminder_datetime_input)],
        SELECT_DATE: [
            CallbackQueryHandler(handle_date_selection, pattern='^(date_|select_time|ignore)'),
        ],
        SELECT_TIME: [
            CallbackQueryHandler(handle_time_selection, pattern='^(hour_|minute_|back_to_date|save_reminder)'),
        ],
    },
    fallbacks=[
        CallbackQueryHandler(handle_reminder_callback, pattern='^reminder$'),
        MessageHandler(filters.COMMAND, handle_reminder_callback)
    ],
    name="create_reminder",
    persistent=False
)

edit_reminder_title_conversation = ConversationHandler(
    entry_points=[CallbackQueryHandler(handle_edit_reminder_title, pattern='^edit_reminder_title$')],
    states={
        EDIT_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_edit_reminder_title_input)],
    },
    fallbacks=[
        CallbackQueryHandler(handle_view_reminder, pattern='^view_reminder_[0-9]+$'),
        MessageHandler(filters.COMMAND, handle_reminder_callback)
    ],
    name="edit_reminder_title",
    persistent=False
)

edit_reminder_datetime_conversation = ConversationHandler(
    entry_points=[CallbackQueryHandler(handle_edit_reminder_datetime, pattern='^edit_reminder_datetime$')],
    states={
        EDIT_DATETIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_edit_reminder_datetime_input)],
        SELECT_DATE: [
            CallbackQueryHandler(handle_date_selection, pattern='^(date_|select_time|ignore)'),
        ],
        SELECT_TIME: [
            CallbackQueryHandler(handle_time_selection, pattern='^(hour_|minute_|back_to_date|save_reminder)'),
        ],
    },
    fallbacks=[
        CallbackQueryHandler(handle_view_reminder, pattern='^view_reminder_[0-9]+$'),
        MessageHandler(filters.COMMAND, handle_reminder_callback)
    ],
    name="edit_reminder_datetime",
    persistent=False
)

reminder_handler = CallbackQueryHandler(handle_reminder_callback, pattern='^reminder$')
list_reminders_handler = CallbackQueryHandler(handle_list_reminders, pattern='^list_reminders$')
view_reminder_handler = CallbackQueryHandler(handle_view_reminder, pattern='^view_reminder_[0-9]+$')
edit_reminder_handler = CallbackQueryHandler(handle_edit_reminder, pattern='^edit_reminder_[0-9]+$')
complete_reminder_handler = CallbackQueryHandler(handle_complete_reminder, pattern='^complete_reminder_[0-9]+$')
delete_reminder_handler = CallbackQueryHandler(handle_delete_reminder, pattern='^delete_reminder_[0-9]+$')
delete_reminder_confirm_handler = CallbackQueryHandler(handle_delete_reminder_confirm,
                                                       pattern='^delete_reminder_confirm_[0-9]+$')

async def check_and_send_reminders(context: CallbackContext):
    from services.database_service import get_due_reminders, mark_reminder_completed

    due_reminders = get_due_reminders()

    for reminder_id, user_id, title, reminder_datetime in due_reminders:
        try:
            dt = datetime.strptime(reminder_datetime, "%Y-%m-%d %H:%M:%S")
            formatted_datetime = dt.strftime("%d.%m.%Y %H:%M")

            keyboard = [
                [InlineKeyboardButton("‚úÖ –í—ñ–¥–º—ñ—Ç–∏—Ç–∏ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ", callback_data=f'complete_reminder_{reminder_id}')],
                [InlineKeyboardButton("üìã –ú–æ—ó –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è", callback_data='list_reminders')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚è∞ *–ù–ê–ì–ê–î–£–í–ê–ù–ù–Ø*\n\n"
                     f"üìù *{title}*\n"
                     f"‚è∞ –ß–∞—Å: *{formatted_datetime}*",
                parse_mode="Markdown",
                reply_markup=reply_markup
            )

            mark_reminder_completed(user_id, reminder_id)
        except Exception as e:
            print(f"Error sending reminder: {e}")
