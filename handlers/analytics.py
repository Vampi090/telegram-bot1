from telegram import Update
from telegram.ext import CallbackContext, CallbackQueryHandler, CommandHandler
from keyboards.analytics_menu import analytics_menu_keyboard
from services.logging_service import log_command_usage
from services.analytics_service import (
    get_expense_stats,
    generate_expense_chart,
    export_transactions_to_excel,
    get_transaction_report
)
import os


async def handle_analytics_callback(update: Update, context: CallbackContext):
    await log_command_usage(update, context)
    user = update.effective_user

    reply_markup = analytics_menu_keyboard()

    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            text="üì• –ú–µ–Ω—é –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏",
            reply_markup=reply_markup
        )


async def handle_stats_callback(update: Update, context: CallbackContext):
    await log_command_usage(update, context)

    user_id = update.callback_query.from_user.id
    await update.callback_query.answer()

    stats_data = get_expense_stats(user_id)

    if not stats_data:
        text = "üìä –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤–∏—Ç—Ä–∞—Ç–∏."
    else:
        text = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏—Ç—Ä–∞—Ç –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏:*\n"
        for category, total in stats_data:
            text += f"üîπ {category}: {round(total, 2)} –≥—Ä–Ω\n"

    reply_markup = analytics_menu_keyboard()

    await update.callback_query.edit_message_text(
        text=text,
        parse_mode="Markdown",
        reply_markup=reply_markup
    )


async def handle_chart_callback(update: Update, context: CallbackContext):
    await log_command_usage(update, context)

    user_id = update.callback_query.from_user.id
    await update.callback_query.answer()

    file_path = generate_expense_chart(user_id)

    if not file_path:
        await update.callback_query.edit_message_text(
            text="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫–∞.",
            reply_markup=analytics_menu_keyboard()
        )
        return

    with open(file_path, "rb") as photo:
        await context.bot.send_photo(
            chat_id=user_id,
            photo=photo,
            caption="üìä –í–∞—à –≥—Ä–∞—Ñ—ñ–∫ –≤–∏—Ç—Ä–∞—Ç."
        )

    os.remove(file_path)

    await context.bot.send_message(
        chat_id=user_id,
        text="üìä –ì—Ä–∞—Ñ—ñ–∫ –≤–∏—Ç—Ä–∞—Ç –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ.",
        reply_markup=analytics_menu_keyboard()
    )


async def handle_report_callback(update: Update, context: CallbackContext):
    await log_command_usage(update, context)

    user_id = update.callback_query.from_user.id
    await update.callback_query.answer()

    report = get_transaction_report(user_id, days=30)

    if report['transaction_count'] == 0:
        text = "üìä –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤."
    else:
        text = f"üìä *–ó–≤—ñ—Ç –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ {report['days']} –¥–Ω—ñ–≤:*\n\n"
        text += f"üí∞ –î–æ—Ö–æ–¥–∏: {round(report['total_income'], 2)} –≥—Ä–Ω\n"
        text += f"üí∏ –í–∏—Ç—Ä–∞—Ç–∏: {round(report['total_expense'], 2)} –≥—Ä–Ω\n"
        text += f"üìà –ë–∞–ª–∞–Ω—Å: {round(report['balance'], 2)} –≥—Ä–Ω\n\n"

        if report['top_expense_categories']:
            text += "üîù *–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç:*\n"
            for category, amount in report['top_expense_categories']:
                text += f"üîπ {category}: {round(abs(amount), 2)} –≥—Ä–Ω\n"

        text += f"\nüìù –í—Å—å–æ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: {report['transaction_count']}"

    await update.callback_query.edit_message_text(
        text=text,
        parse_mode="Markdown",
        reply_markup=analytics_menu_keyboard()
    )


async def handle_export_command(update: Update, context: CallbackContext):
    await log_command_usage(update, context)

    user_id = update.effective_user.id

    file_path = export_transactions_to_excel(user_id)

    if not file_path:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É.")
        return

    with open(file_path, "rb") as doc:
        await context.bot.send_document(
            chat_id=user_id,
            document=doc,
            filename=f"transactions_{user_id}.xlsx",
            caption="üìÅ –í–∞—à—ñ –¥–∞–Ω—ñ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω—ñ –≤ Excel –∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º."
        )

    os.remove(file_path)


analytics_handler = CallbackQueryHandler(handle_analytics_callback, pattern='^analytics$')
stats_handler = CallbackQueryHandler(handle_stats_callback, pattern='^stats$')
chart_handler = CallbackQueryHandler(handle_chart_callback, pattern='^chart$')
report_handler = CallbackQueryHandler(handle_report_callback, pattern='^report$')
export_handler = CommandHandler('export', handle_export_command)
