from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, CallbackQueryHandler, CommandHandler, ConversationHandler, MessageHandler, filters
from keyboards.transaction_menu import transaction_menu_keyboard
from services.logging_service import log_command_usage
from services.transaction_service import (
    add_new_transaction,
    get_user_transaction_history,
    filter_user_transactions,
    get_user_last_transaction,
    delete_user_transaction
)
from models.transaction import Transaction
from utils.menu_utils import send_or_edit_menu


async def handle_transactions_callback(update: Update, context: CallbackContext):
    await log_command_usage(update, context)
    user = update.effective_user

    reply_markup = transaction_menu_keyboard()

    await send_or_edit_menu(update, context, "üì• –ú–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è–º–∏", reply_markup)


async def add_transaction(update: Update, context: CallbackContext):
    await log_command_usage(update, context)
    message = update.message

    if not message or not context.args:
        if message:
            await send_or_edit_menu(
                update, 
                context, 
                "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/add —Å—É–º–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è`\n–ü—Ä–∏–º–µ—Ä: `/add 500 –µ–¥–∞`", 
                None,
                parse_mode="Markdown"
            )
        return

    try:
        amount = float(context.args[0])
    except ValueError:
        await send_or_edit_menu(
            update, 
            context, 
            "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.", 
            None
        )
        return

    category = " ".join(context.args[1:])
    user_id = update.effective_user.id

    transaction = add_new_transaction(user_id, amount, category)

    reply_markup = InlineKeyboardMarkup([[
        InlineKeyboardButton("üîô –ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º", callback_data="transactions")
    ]])

    if transaction:
        text = f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞:\nüí∞ {transaction.amount} | üìÇ {transaction.category} | üîπ {transaction.transaction_type}"
    else:
        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    await send_or_edit_menu(update, context, text, reply_markup)


WAITING_FOR_AMOUNT = 1
WAITING_FOR_CATEGORY = 2


async def handle_add_callback(update: Update, context: CallbackContext):
    await log_command_usage(update, context)

    if update.callback_query:
        text = ("‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:*\n\n"
                "*–ü—Ä–∏–º–µ—Ä:* `500` –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞"
                " –∏–ª–∏ `-500` –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")

        reply_markup = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="transactions")
        ]])

        await send_or_edit_menu(update, context, text, reply_markup, parse_mode="Markdown")
        return WAITING_FOR_AMOUNT
    return ConversationHandler.END


async def handle_amount_input(update: Update, context: CallbackContext):
    user_input = update.message.text

    try:
        amount = float(user_input)
        context.user_data['amount'] = amount

        text = ("‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:*\n\n"
                "*–ü—Ä–∏–º–µ—Ä:* `–ü—Ä–æ–¥—É–∫—Ç—ã`, `–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç`, `–ó–∞—Ä–ø–ª–∞—Ç–∞`")

        reply_markup = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="transactions")
        ]])

        await send_or_edit_menu(update, context, text, reply_markup, parse_mode="Markdown")
        return WAITING_FOR_CATEGORY
    except ValueError:
        await send_or_edit_menu(
            update, 
            context, 
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:", 
            None
        )
        return WAITING_FOR_AMOUNT


async def handle_category_input(update: Update, context: CallbackContext):
    category = update.message.text
    context.user_data['category'] = category

    user_id = update.effective_user.id
    amount = context.user_data.get('amount')

    transaction = add_new_transaction(user_id, amount, category)

    if transaction:
        text = f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞:\nüí∞ {transaction.amount} | üìÇ {transaction.category} | üîπ {transaction.transaction_type}"

        reply_markup = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º", callback_data="transactions")
        ]])
        await send_or_edit_menu(update, context, text, reply_markup)
    else:
        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

        reply_markup = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º", callback_data="transactions")
        ]])

        await send_or_edit_menu(update, context, text, reply_markup)

    return ConversationHandler.END


async def history(update: Update, context: CallbackContext):
    await log_command_usage(update, context)

    user_id = None
    if update.message:
        user_id = update.message.from_user.id
    elif update.callback_query:
        user_id = update.callback_query.from_user.id
        await update.callback_query.answer()

    if not user_id:
        return

    transactions = get_user_transaction_history(user_id, limit=10)

    if not transactions:
        text = "üìú –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π."
    else:
        text = "üìù *–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):*\n"
        for transaction in transactions:
            text += f"üìÖ {transaction.timestamp} | üí∞ {transaction.amount} –≥—Ä–Ω | üìÇ {transaction.category} ({transaction.transaction_type})\n"

    reply_markup = InlineKeyboardMarkup([[
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="transactions")
    ]])

    await send_or_edit_menu(update, context, text, reply_markup, parse_mode="Markdown")


async def filter_transactions(update: Update, context: CallbackContext):
    await log_command_usage(update, context)

    user_id = update.message.from_user.id
    args = context.args

    if not args:
        await send_or_edit_menu(
            update, 
            context, 
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ —Ç–∏–ø. –ü—Ä–∏–º–µ—Ä: `/transactions –ü—Ä–æ–¥—É–∫—Ç—ã`", 
            None,
            parse_mode="Markdown"
        )
        return

    filter_param = " ".join(args)

    transactions = filter_user_transactions(user_id, filter_param)

    if not transactions:
        await send_or_edit_menu(
            update, 
            context, 
            f"üîç –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É '*{filter_param}*' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", 
            None,
            parse_mode="Markdown"
        )
        return

    message_lines = [f"üìÇ *–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É:* `{filter_param}`"]
    for transaction in transactions:
        message_lines.append(f"üìÖ `{transaction.timestamp}` | üí∞ `{transaction.amount} –≥—Ä–Ω` | üè∑Ô∏è {transaction.category} ({transaction.transaction_type})")

    message = "\n".join(message_lines)

    reply_markup = InlineKeyboardMarkup([[
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="transactions")
    ]])
    await send_or_edit_menu(update, context, message, reply_markup, parse_mode="Markdown")


async def undo_transaction(update: Update, context: CallbackContext):
    await log_command_usage(update, context)

    user_id = None
    if update.message:
        user_id = update.message.from_user.id
    elif update.callback_query:
        user_id = update.callback_query.from_user.id
        await update.callback_query.answer()

    if not user_id:
        return

    transaction = get_user_last_transaction(user_id)

    if not transaction:
        text = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        reply_markup = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="transactions")
        ]])
        await send_or_edit_menu(update, context, text, reply_markup)
        return

    success = delete_user_transaction(transaction.id)

    if success:
        text = f"‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞:\nüìÖ {transaction.timestamp} | üí∞ {transaction.amount} –≥—Ä–Ω | üìÇ {transaction.category} ({transaction.transaction_type})"
    else:
        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

    reply_markup = InlineKeyboardMarkup([[
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="transactions")
    ]])
    await send_or_edit_menu(update, context, text, reply_markup)


transactions_handler = CallbackQueryHandler(handle_transactions_callback, pattern='^transactions$')
add_transaction_handler = CommandHandler("add", add_transaction)
history_handler = CommandHandler("history", history)
history_callback_handler = CallbackQueryHandler(history, pattern='^history$')
filter_transactions_handler = CommandHandler("transactions", filter_transactions)
undo_callback_handler = CallbackQueryHandler(undo_transaction, pattern='^undo$')
add_transaction_conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(handle_add_callback, pattern='^add$')],
    states={
        WAITING_FOR_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_amount_input)],
        WAITING_FOR_CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_category_input)],
    },
    fallbacks=[CallbackQueryHandler(handle_transactions_callback, pattern='^transactions$')]
)
